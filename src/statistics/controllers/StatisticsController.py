from src.core.tools.Inject import Injectfrom src.statistics.controllers.validators.StatisticsValidator import StatisticsValidatorclass StatisticsController:    def __init__(self, statistics_service, statistics_view, uow):        self.statistics_view = statistics_view        self.statistics_service = statistics_service        self.uow = uow    @StatisticsValidator.update_body_params    @Inject.body    def create(self, file, name, description, separator):        with self.uow as uow :            try:                model = self.statistics_service.create(uow, file, name, description, separator)            except  Exception as statsEx:                return self.statistics_view.bad_request(statsEx.__str__()), 400            return self.statistics_view.show(model), 201    def get(self,id):        with self.uow as uow :            model = uow.statistics.get(id)            return  self.statistics_view.show(model) if model is not  None else (self.statistics_view.not_found(), 404)    def getAll(self):        with self.uow as uow :            return self.statistics_view.show_all(uow.statistics.getAll()), 200    def delete(self,id):        with self.uow as uow :            model = uow.statistics.get(id)            if model is None :                return self.statistics_view.not_found(), 404            try:             self.statistics_service.delete(uow,model)            except Exception as statsEx:                return self.statistics_view.bad_request(statsEx.__str__()), 400        return "", 204