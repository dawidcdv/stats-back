import globimport importlibimport inspectimport osclass ControllerDiscovery:    def load(self, module):        controllerFiles = glob.glob(os.path.join(module.getControllersPath(), '*.py'))        controllers = [os.path.basename(f)[:-3] for f in controllerFiles if "Controller" in f.__str__()]        controllerModuleName = '.'.join(module.__module__.split('.')[:-1])+ "." + \                               os.path.basename(module.getControllersPath())        controllerModule = importlib.import_module(controllerModuleName)        controllersObject = []        for controller in controllers:            className = getattr(getattr(controllerModule, controller), controller)            controllersObject.append(self.__create(className, module.getDependencies()))        return controllersObject    def __create(self, classRef, dependencies):        params = inspect.signature(classRef).parameters        deps = {            name: dependency            for name, dependency in dependencies.items()            if name in params        }        try:            return classRef(**deps)        except:            raise Exception("Contorller create error. Do you registry correct all dependencies ? ")